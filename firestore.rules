rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a group manager of a specific group
    function isManagerOfGroup(userId, groupId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
      return userDoc.userType == "Gestor do Grupo" && userDoc.groupId == groupId;
    }

    // Helper function to check if a user is a group manager
    function isGroupManager(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == "Gestor do Grupo";
    }

    // Helper function to check if two users are in the same group
    function inSameGroup(userId1, userId2) {
      let user1GroupId = get(/databases/$(database)/documents/users/$(userId1)).data.groupId;
      let user2GroupId = get(/databases/$(database)/documents/users/$(userId2)).data.groupId;
      return user1GroupId != null && user1GroupId == user2GroupId;
    }
    
    // Helper function to check if a user belongs to a group
    function isMemberOfGroup(userId, groupId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.groupId == groupId;
    }

    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || inSameGroup(request.auth.uid, userId));
      allow write: if request.auth != null && (
        (request.resource.data.keys().hasAll(['displayName', 'userType', 'playerSubscriptionType', 'rating', 'photoURL', 'uid', 'email', 'groupId', 'createdAt', 'allowConfirmationWithDebt']) && request.auth.uid == userId) || // Allow user to create/update their own profile
        (
          isGroupManager(request.auth.uid) && // Allow group manager...
          inSameGroup(request.auth.uid, userId) && // ...in the same group...
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['allowConfirmationWithDebt', 'groupId']) // ...to only update the debt permission or remove from group
        )
      );
    }

    match /groups/{groupId} {
      allow read: if request.auth != null && isMemberOfGroup(request.auth.uid, groupId);
      allow write: if request.auth != null && isManagerOfGroup(request.auth.uid, groupId);

      match /games/{gameId}/attendees/{attendeeId} {
        allow read: if request.auth != null && isMemberOfGroup(request.auth.uid, groupId);
        allow write: if request.auth != null && request.auth.uid == attendeeId;
      }
    }
  }
}
