
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isGroupManager(groupId) {
      let groupDoc = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth != null && groupDoc.exists() && groupDoc.data.managerId == request.auth.uid;
    }
    
    function isGroupMember(groupId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null && userDoc.exists() && userDoc.data.groupId == groupId;
    }

    match /users/{userId} {
      // A user can read their own profile.
      // A group member can read the profiles of other members in the same group.
      allow read: if request.auth != null && (isOwner(userId) || (
                    resource.data.groupId != null && isGroupMember(resource.data.groupId)
                  ));

      // A new user can create their own user document.
      allow create: if isOwner(userId);
      
      // A user can update their own profile.
      // A group manager can update a player's groupId to remove them.
      allow update: if request.auth != null && (
                      isOwner(userId) || 
                      (resource.data.groupId != null && isGroupManager(resource.data.groupId))
                    );
    }

    match /groups/{groupId} {
      // A group member can read their group's information.
      allow read: if request.auth != null && isGroupMember(groupId);

      // A new group manager can create their own group document.
      allow create: if request.auth != null && isOwner(groupId) && request.resource.data.managerId == request.auth.uid;
      
      // The group manager can update their group's information.
      allow update: if request.auth != null && isGroupManager(groupId);
    }
  }
}
