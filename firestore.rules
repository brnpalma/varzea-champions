
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // METODOS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserSelf(userId) {
      return request.auth.uid == userId;
    }
    
    function isManager(groupId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.exists && userDoc.data.userType == "Gestor do Grupo" && userDoc.data.groupId == groupId;
    }

    function isGuestGroup(groupId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId == groupId;
    }
//////////////////////////////////////////////////////////////

    match /users/{userId} {
      allow read, write: if isUserAuthenticated() 
                          && (isUserSelf(userId) || isManager(resource.data.groupId) || isGuestGroup(resource.data.groupId));
    }

    match /groups/{groupId} {
      allow read: if isUserAuthenticated();
      
      allow write: if isUserAuthenticated() 
                    && (isManager(groupId) || request.resource.data.managerId == request.auth.uid);
                      
      match /games/{gameId} {
        allow read: if isUserAuthenticated() && (isManager(groupId) || isGuestGroup(groupId));
        
        match /attendees/{userId} {
          allow read: if isUserAuthenticated() && (isManager(groupId) || isGuestGroup(groupId));
          allow write: if isUserAuthenticated() && (isManager(groupId) || isUserSelf(userId));
        }
      }
    }
    
    match /{path=**}/attendees/{attendeeId} {
        allow read: if isUserAuthenticated() && (isManager(resource.data.groupId) || isGuestGroup(resource.data.groupId));
    }
  }
}