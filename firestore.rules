rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isGroupManager(groupId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'Gestor do Grupo' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId == groupId;
    }
    
    function userBelongsToGroup(groupId) {
        return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId == groupId;
    }

    match /users/{userId} {
      // Regra Simplificada: Um usuário sempre pode ler seu próprio perfil.
      allow read: if request.auth.uid == userId;

      // Um usuário pode criar seu próprio perfil.
      // Um usuário pode atualizar seu próprio perfil.
      // Um gestor pode atualizar a permissão de dívida de um jogador do seu grupo.
      allow write: if (request.auth.uid == userId) || 
                   (isGroupManager(resource.data.groupId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['allowConfirmationWithDebt']));
    }

    match /groups/{groupId} {
      // Membros do grupo podem ler as configurações do grupo.
      allow read: if userBelongsToGroup(groupId);

      // Apenas o gestor pode escrever no grupo.
      // Permite a criação se o managerId for o próprio usuário.
      allow write: if (request.resource.data.managerId == request.auth.uid) || isGroupManager(groupId);
      
      match /games/{gameId} {
        // Membros do grupo podem ler os dados dos jogos.
        allow read: if userBelongsToGroup(groupId);
        
        match /attendees/{userId} {
            // Membros do grupo podem ler a lista de confirmados.
            allow read: if userBelongsToGroup(groupId);
            // Um jogador só pode confirmar/negar a sua própria presença.
            allow write: if request.auth.uid == userId;
        }
      }
    }
  }
}
