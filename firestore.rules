rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to a specific group
    function isUserInGroup(userId, groupId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.groupId == groupId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow read access if:
      // 1. The user is reading their own profile.
      // 2. The user is reading the profile of someone in the same group.
      allow read: if request.auth != null &&
                   (request.auth.uid == userId ||
                    isUserInGroup(request.auth.uid, resource.data.groupId));

      // Allow write access if:
      // 1. The user is creating their own profile document for the first time.
      // 2. The user is updating their own profile document.
      // 3. The user is a Group Manager and is updating the 'allowConfirmationWithDebt' field of a user in their group.
      allow write: if request.auth != null &&
                    (request.auth.uid == userId ||
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'Gestor do Grupo' &&
                      isUserInGroup(request.auth.uid, resource.data.groupId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['allowConfirmationWithDebt'])));
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      // Allow read access if the user is a member of the group.
      allow read: if request.auth != null && isUserInGroup(request.auth.uid, groupId);

      // Allow write access if:
      // 1. The user is creating the group and setting themselves as the manager.
      // 2. The user is already the manager of the group they are trying to update.
      allow write: if request.auth != null &&
                    (request.resource.data.managerId == request.auth.uid ||
                     get(/databases/$(database)/documents/groups/$(groupId)).data.managerId == request.auth.uid);

      // Rules for subcollections within a group
      match /games/{gameId} {
        // Allow read access to game data if the user is in the group.
        allow read: if request.auth != null && isUserInGroup(request.auth.uid, groupId);

        match /attendees/{userId} {
           // Allow read access to attendees list if the user is in the group.
           allow read: if request.auth != null && isUserInGroup(request.auth.uid, groupId);
           // Allow a user to write only to their own attendance document.
           allow write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }
  }
}
