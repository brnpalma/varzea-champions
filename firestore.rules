
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is the manager of a specific group
    function isGroupManager(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.managerId == request.auth.uid;
    }
    
    // Helper function to check if two users are in the same group
    function areInSameGroup(user1Id, user2Id) {
      let user1GroupId = get(/databases/$(database)/documents/users/$(user1Id)).data.groupId;
      let user2GroupId = get(/databases/$(database)/documents/users/$(user2Id)).data.groupId;
      return user1GroupId != null && user1GroupId == user2GroupId;
    }

    match /users/{userId} {
      // Allow read access to own profile or if in the same group
      allow read: if request.auth != null && (request.auth.uid == userId || areInSameGroup(request.auth.uid, userId));
      
      // Allow create for new users (their own document)
      allow create: if request.auth.uid == userId;

      // Allow updates by the user themselves, or by a group manager removing a player
      allow update: if request.auth.uid == userId || (isGroupManager(request.resource.data.groupId) && request.resource.data.groupId != resource.data.groupId);
    }

    match /groups/{groupId} {
      // Allow read access to authenticated users who are part of the group
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId == groupId;

      // Allow a user to create a group if they set themselves as the manager
      allow create: if request.auth.uid != null && request.resource.data.managerId == request.auth.uid;
      
      // Allow updates only by the group manager
      allow update: if request.auth.uid != null && isGroupManager(groupId);
    }
  }
}
